
ECE 198 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004c8  080004c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c8  080004c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004d4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f2a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000920  00000000  00000000  00021fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  000228c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a5  00000000  00000000  00022b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013f69  00000000  00000000  00022cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000037c9  00000000  00000000  00036c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e214  00000000  00000000  0003a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000724  00000000  00000000  000b860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b8d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004a8 	.word	0x080004a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004a8 	.word	0x080004a8

080001d4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	while (1) {
	        if (check_motion_sensor()) {
 80001d8:	f000 f86c 	bl	80002b4 <check_motion_sensor>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d0fa      	beq.n	80001d8 <main+0x4>
	            move_both_stepper_motors();
 80001e2:	f000 f877 	bl	80002d4 <move_both_stepper_motors>
	        if (check_motion_sensor()) {
 80001e6:	e7f7      	b.n	80001d8 <main+0x4>

080001e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001ec:	e7fe      	b.n	80001ec <NMI_Handler+0x4>

080001ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <HardFault_Handler+0x4>

080001f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <MemManage_Handler+0x4>

080001fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <BusFault_Handler+0x4>

08000200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000204:	e7fe      	b.n	8000204 <UsageFault_Handler+0x4>

08000206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000206:	b480      	push	{r7}
 8000208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000234:	f000 f89e 	bl	8000374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <SystemInit+0x20>)
 8000242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <SystemInit+0x20>)
 8000248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800024c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000298 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000266:	490e      	ldr	r1, [pc, #56]	; (80002a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800027c:	4c0b      	ldr	r4, [pc, #44]	; (80002ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800028a:	f7ff ffd7 	bl	800023c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800028e:	f000 f8e7 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000292:	f7ff ff9f 	bl	80001d4 <main>
  bx  lr    
 8000296:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000298:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002a4:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 80002a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002ac:	20000024 	.word	0x20000024

080002b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC_IRQHandler>
	...

080002b4 <check_motion_sensor>:
#define STEPPER_MOTOR_2_PIN_1 GPIO_PIN_5 // Replace with actual pins for the second motor
#define STEPPER_MOTOR_2_PIN_2 GPIO_PIN_6
#define STEPPER_MOTOR_2_PIN_3 GPIO_PIN_7
#define STEPPER_MOTOR_2_PIN_4 GPIO_PIN_8

int check_motion_sensor() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MOTION_SENSOR_PORT, MOTION_SENSOR_PIN) == GPIO_PIN_SET) {
 80002b8:	2101      	movs	r1, #1
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <check_motion_sensor+0x1c>)
 80002bc:	f000 f89e 	bl	80003fc <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d101      	bne.n	80002ca <check_motion_sensor+0x16>
        return 1; // Motion detected
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <check_motion_sensor+0x18>
    } else {
        return 0; // No motion
 80002ca:	2300      	movs	r3, #0
    }
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40020000 	.word	0x40020000

080002d4 <move_both_stepper_motors>:

void move_both_stepper_motors() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
    // Sequence for both stepper motors (assuming the same sequence for both)
    uint16_t step_sequence[4] = {STEPPER_MOTOR_1_PIN_1 | STEPPER_MOTOR_2_PIN_1,
 80002da:	4a23      	ldr	r2, [pc, #140]	; (8000368 <move_both_stepper_motors+0x94>)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e2:	e883 0003 	stmia.w	r3, {r0, r1}
                                 STEPPER_MOTOR_1_PIN_2 | STEPPER_MOTOR_2_PIN_2,
                                 STEPPER_MOTOR_1_PIN_3 | STEPPER_MOTOR_2_PIN_3,
                                 STEPPER_MOTOR_1_PIN_4 | STEPPER_MOTOR_2_PIN_4};

    // Perform stepping sequence to move both motors simultaneously
    for (int i = 0; i < 4; i++) {
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e034      	b.n	8000356 <move_both_stepper_motors+0x82>
        HAL_GPIO_WritePin(STEPPER_MOTOR_1_PORT, step_sequence[i], GPIO_PIN_SET);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	3310      	adds	r3, #16
 80002f2:	443b      	add	r3, r7
 80002f4:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80002f8:	2201      	movs	r2, #1
 80002fa:	4619      	mov	r1, r3
 80002fc:	481b      	ldr	r0, [pc, #108]	; (800036c <move_both_stepper_motors+0x98>)
 80002fe:	f000 f895 	bl	800042c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(STEPPER_MOTOR_2_PORT, step_sequence[i], GPIO_PIN_SET);
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	3310      	adds	r3, #16
 8000308:	443b      	add	r3, r7
 800030a:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800030e:	2201      	movs	r2, #1
 8000310:	4619      	mov	r1, r3
 8000312:	4817      	ldr	r0, [pc, #92]	; (8000370 <move_both_stepper_motors+0x9c>)
 8000314:	f000 f88a 	bl	800042c <HAL_GPIO_WritePin>
        HAL_Delay(10); // Adjust delay based on motor speed
 8000318:	200a      	movs	r0, #10
 800031a:	f000 f84b 	bl	80003b4 <HAL_Delay>
        HAL_GPIO_WritePin(STEPPER_MOTOR_1_PORT, step_sequence[i], GPIO_PIN_RESET);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	3310      	adds	r3, #16
 8000324:	443b      	add	r3, r7
 8000326:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800032a:	2200      	movs	r2, #0
 800032c:	4619      	mov	r1, r3
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <move_both_stepper_motors+0x98>)
 8000330:	f000 f87c 	bl	800042c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(STEPPER_MOTOR_2_PORT, step_sequence[i], GPIO_PIN_RESET);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	3310      	adds	r3, #16
 800033a:	443b      	add	r3, r7
 800033c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000340:	2200      	movs	r2, #0
 8000342:	4619      	mov	r1, r3
 8000344:	480a      	ldr	r0, [pc, #40]	; (8000370 <move_both_stepper_motors+0x9c>)
 8000346:	f000 f871 	bl	800042c <HAL_GPIO_WritePin>
        HAL_Delay(10); // Adjust delay based on motor speed
 800034a:	200a      	movs	r0, #10
 800034c:	f000 f832 	bl	80003b4 <HAL_Delay>
    for (int i = 0; i < 4; i++) {
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b03      	cmp	r3, #3
 800035a:	ddc7      	ble.n	80002ec <move_both_stepper_motors+0x18>
    }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	080004c0 	.word	0x080004c0
 800036c:	40020000 	.word	0x40020000
 8000370:	40020400 	.word	0x40020400

08000374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_IncTick+0x20>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_IncTick+0x24>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4413      	add	r3, r2
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_IncTick+0x24>)
 8000386:	6013      	str	r3, [r2, #0]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000
 8000398:	20000020 	.word	0x20000020

0800039c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  return uwTick;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <HAL_GetTick+0x14>)
 80003a2:	681b      	ldr	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000020 	.word	0x20000020

080003b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003bc:	f7ff ffee 	bl	800039c <HAL_GetTick>
 80003c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003cc:	d005      	beq.n	80003da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_Delay+0x44>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	461a      	mov	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	4413      	add	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003da:	bf00      	nop
 80003dc:	f7ff ffde 	bl	800039c <HAL_GetTick>
 80003e0:	4602      	mov	r2, r0
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d8f7      	bhi.n	80003dc <HAL_Delay+0x28>
  {
  }
}
 80003ec:	bf00      	nop
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000000 	.word	0x20000000

080003fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	691a      	ldr	r2, [r3, #16]
 800040c:	887b      	ldrh	r3, [r7, #2]
 800040e:	4013      	ands	r3, r2
 8000410:	2b00      	cmp	r3, #0
 8000412:	d002      	beq.n	800041a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000414:	2301      	movs	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	e001      	b.n	800041e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	807b      	strh	r3, [r7, #2]
 8000438:	4613      	mov	r3, r2
 800043a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800043c:	787b      	ldrb	r3, [r7, #1]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d003      	beq.n	800044a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000442:	887a      	ldrh	r2, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000448:	e003      	b.n	8000452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800044a:	887b      	ldrh	r3, [r7, #2]
 800044c:	041a      	lsls	r2, r3, #16
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	619a      	str	r2, [r3, #24]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	4d0d      	ldr	r5, [pc, #52]	; (8000498 <__libc_init_array+0x38>)
 8000464:	4c0d      	ldr	r4, [pc, #52]	; (800049c <__libc_init_array+0x3c>)
 8000466:	1b64      	subs	r4, r4, r5
 8000468:	10a4      	asrs	r4, r4, #2
 800046a:	2600      	movs	r6, #0
 800046c:	42a6      	cmp	r6, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	4d0b      	ldr	r5, [pc, #44]	; (80004a0 <__libc_init_array+0x40>)
 8000472:	4c0c      	ldr	r4, [pc, #48]	; (80004a4 <__libc_init_array+0x44>)
 8000474:	f000 f818 	bl	80004a8 <_init>
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	2600      	movs	r6, #0
 800047e:	42a6      	cmp	r6, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f855 3b04 	ldr.w	r3, [r5], #4
 8000488:	4798      	blx	r3
 800048a:	3601      	adds	r6, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000492:	4798      	blx	r3
 8000494:	3601      	adds	r6, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c8 	.word	0x080004c8
 800049c:	080004c8 	.word	0x080004c8
 80004a0:	080004c8 	.word	0x080004c8
 80004a4:	080004cc 	.word	0x080004cc

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
